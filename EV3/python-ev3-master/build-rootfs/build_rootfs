#! /bin/dash
# ------------------------------------------------------------------------------
# build-rootfs.sh - download and configure a minimal rootfs for python-ev3
#
# Must be run as root (use sudo of course!)
# ------------------------------------------------------------------------------

error_out () {
    echo "$1"
    exit 1
}

if [ "$(whoami)" != "root" ]; then
	error_out "Sorry, you are not root."
fi

export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true
export LC_ALL=C LANGUAGE=C LANG=C

TARGET_ROOTFS_DIR="ev3-rootfs"
TARGET_ROOTFS_DIR_PARENT="../../python-ev3-rootfs"
# ------------------------------------------------------------------------------
# Make sure were running at the same level as a directory called python-ev3 so
# that our directory structure is maintained!

if [ ! -d ../build-rootfs ]; then
	error_out "Not running at same directory level as build_rootfs"
fi

if test $# -gt 0 ; then
    TARGET_ROOTFS_DIR_PARENT=$1
fi

if [ ! -d ${TARGET_ROOTFS_DIR_PARENT} ]; then
	error_out "You need to create ${TARGET_ROOTFS_DIR_PARENT} first"
fi

# ------------------------------------------------------------------------------
# Download the bare ev3-rootfs directory if we don't already have it

cd ${TARGET_ROOTFS_DIR_PARENT}

if [ ! -d ${TARGET_ROOTFS_DIR} ]; then
    echo    "-------------------------------------------------------------------------------"
    echo    " Downloading a complete grip rootfs from emDebian - this might take a while"
    echo    " so you might want to tail the multistrap.log file from another shell to keep"
    echo    " track of progress ... "
    echo    ""
    echo -n "    Type \"Yes\" to continue, anything else to skip ... "
    read YesNo

    if [ "${YesNo}" = "Yes" ]; then
#       multistrap -f multistrap.conf > multistrap.log 2>&1

        multistrap -f ${OLDPWD}/multistrap.conf 

        echo    "Done"
        echo    "-------------------------------------------------------------------------------"
    fi
else
    echo    " Checking for existing ev3-rootfs - already exists!"
fi

cd ${OLDPWD}

# ------------------------------------------------------------------------------
# Configuring the rootfs

cd ${TARGET_ROOTFS_DIR_PARENT}

    echo    "-------------------------------------------------------------------------------"
    echo    " This step will configure the rootfs - it will take a while and overwrite"
    echo    " any customizations you have done!"
    echo    ""
    echo -n "    Type \"Yes\" to continue, anything else to skip ... "
    read YesNo


    if [ "${YesNo}" = "Yes" ]; then

        if [ ! -e ${TARGET_ROOTFS_DIR}/usr/bin/qemu-arm-static ]; then
            echo -n "    Copying qemu-arm-static to ev3-rootfs/usr/bin ... "
            cp /usr/bin/qemu-arm-static ${TARGET_ROOTFS_DIR}/usr/bin 
            echo    " Done"
        fi

        echo -n "    Running the dash.preinst file in ev3-rootfs ... "
        chroot ${TARGET_ROOTFS_DIR} var/lib/dpkg/info/dash.preinst install > /dev/null
        echo "Done"
    
        echo    "    Configuring packages in ev3-rootfs - this will take a while!"
        chroot ${TARGET_ROOTFS_DIR} dpkg --configure -a

        # mount proc -t proc /proc
        # dpkg --configure -a


    fi

cd ${OLDPWD}

# ------------------------------------------------------------------------------
# Set root password and add users

cd ${TARGET_ROOTFS_DIR_PARENT}

    echo    "-------------------------------------------------------------------------------"
    echo    " This step will set the root password and add the default python-ev3 user to the"
    echo    " sudoer group"
    echo    ""
    echo -n "    Type \"Yes\" to continue, anything else to skip ... "
    read YesNo


    if [ "${YesNo}" = "Yes" ]; then

       echo -n "    Setting the root password ... "
       chroot ev3-rootfs passwd 

       echo -n "    Adding the ev3 user ... "
       chroot ${TARGET_ROOTFS_DIR} useradd -m -G sudo,plugdev ev3
       chroot ${TARGET_ROOTFS_DIR} usermod -s /bin/bash       ev3

       # Additional groups we'll add later...
       # ,netdev,audio,video,ssh

       echo -n "    Setting the ev3 password ... "
       chroot ev3-rootfs passwd ev3
    fi

cd ${OLDPWD}

# ------------------------------------------------------------------------------
# Clean out the apt-cache -no sense keeping it around if we've already
# installed the files!

cd ${TARGET_ROOTFS_DIR_PARENT}

    echo    "-------------------------------------------------------------------------------"
    echo    " Purging unneeded files from the apt-cache..."

    chroot ev3-rootfs apt-get purge
    chroot ev3-rootfs apt-get clean

    chroot ev3-rootfs rm -r    /var/lib/apt/lists
    chroot ev3-rootfs mkdir -p /var/lib/apt/lists/partial

    echo    " done"

cd ${OLDPWD}

# ------------------------------------------------------------------------------
# Customizing the rootfs

cd ${TARGET_ROOTFS_DIR_PARENT}

#Directories used to mount microSD partitions 
for media_dir in "mmc_p1" "data"
do
    if [ ! -d ${TARGET_ROOTFS_DIR}/media/${media_dir} ]; then
        echo -n "    Creating mount directories ... "
        mkdir ${TARGET_ROOTFS_DIR}/media/${media_dir}
        echo    "    done"
    fi
done

#Set the target board hostname
filename="${TARGET_ROOTFS_DIR}/etc/hostname"

    if [ ! -d "${filename}" ]; then
        echo -n "    Creating "${filename}" ... "

        echo "python-ev3" > "${filename}"

        echo    "done"
    fi

#Set the default name server - use Google's DNS for now...
filename="${TARGET_ROOTFS_DIR}/etc/resolv.conf"

    if [ ! -d "${filename}" ]; then
        echo -n "    Creating "${filename}" ... "
        touch ${filename}    
#        echo "nameserver 8.8.8.8"  > "${filename}"
#        echo "nameserver 8.8.8.4" >> "${filename}"

        echo    "done"
    fi

#Set the default network interfaces including wireless
filename="${TARGET_ROOTFS_DIR}/etc/network/interfaces"

    if [ ! -d "${filename}" ]; then
        echo -n "    Creating "${filename}" ... "

        echo "auto lo"                            > $filename
        echo "iface lo inet loopback"            >> $filename
        echo ""                                  >> $filename
        echo "allow-hotplug eth0"                >> $filename
        echo "iface eth0 inet dhcp"              >> $filename
        echo "hwaddress ether 00:04:25:12:34:56" >> $filename
        echo ""                                  >> $filename
        echo "auto wlan0"                        >> $filename
        echo "iface wlan0 inet dhcp"             >> $filename

        echo    "done"
    fi

#Set a terminal to the debug port
filename="${TARGET_ROOTFS_DIR}/etc/inittab"

        echo -n "    Updating "${filename}" ... "

        sed -n -i -e "/^T0:2345:respawn:\/sbin\/getty -L ttyS1 115200 vt100/ d" \
                  -e "p"                                                        \
                     "${filename}"

        echo "T0:2345:respawn:/sbin/getty -L ttyS1 115200 vt100" >> "${filename}"

        echo    "done"

#Set how to mount the microSD partitions
filename="${TARGET_ROOTFS_DIR}/etc/fstab"

        echo -n "    Updating "${filename}" ... "

        echo "/dev/mmcblk0p1 /media/mmc_p1 vfat noatime  0 0"  > ${filename}
        echo "/dev/mmcblk0p2 /             ext3 noatime  0 0" >> ${filename}
        echo "proc           /proc         proc defaults 0 0" >> ${filename}
        echo "tmpfs          /var/volatile tmpfs defaults,size=2M 0 0" >> ${filename}
        echo "tmpfs          /mnt/ramdisk  tmpfs defaults,size=6M 0 0" >> ${filename}

        echo    "done"
mkdir ${TARGET_ROOTFS_DIR}/mnt/tmpdisk
mkdir ${TARGET_ROOTFS_DIR}/mnt/ramdisk
mkdir ${TARGET_ROOTFS_DIR}/var/volatile

#Set up wpa_supplicant.conf - add your own keys here!!!
filename="${TARGET_ROOTFS_DIR}/etc/wpa_supplicant.conf"

        echo -n "    Updating "${filename}" ... "

        echo "ctrl_interface=/var/run/wpa_supplicant"   > ${filename}
        echo "#ap_scan=2"                              >> ${filename}
        echo ""                                        >> ${filename}
        echo "network={"                               >> ${filename}
        echo "       ssid=\"Your SSID Here\""          >> ${filename}
        echo "       scan_ssid=1"                      >> ${filename}
        echo "       proto=WPA RSN"                    >> ${filename}
        echo "       key_mgmt=WPA-PSK"                 >> ${filename}
        echo "       pairwise=CCMP TKIP"               >> ${filename}
        echo "       group=CCMP TKIP"                  >> ${filename}
        echo "       psk=\"Your text key here\""       >> ${filename}
        echo "}"                                       >> ${filename}

        echo    "done"

cd ${OLDPWD}


# ------------------------------------------------------------------------------
# Config lms2012
        echo    "-------------------------------------------------------------------------------"
        echo    "Config lms2012..."
        #downgrade udev. we don't need this script anymore in squeeze but let keep them
        #curl http://ftp.us.debian.org/debian/pool/main/u/udev/udev_164-3_armel.deb -o ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/tmp/udev_164-3_armel.deb
        #curl http://ftp.us.debian.org/debian/pool/main/u/udev/libudev0_164-3_armel.deb -o ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/tmp/libudev0_164-3_armel.deb
        #chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} dpkg --force-downgrade -i /tmp/udev_164-3_armel.deb /tmp/libudev0_164-3_armel.deb
        #chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} apt-mark hold udev
        #chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} apt-mark hold libudev0

        #copy modules
        cp -r lib/*  ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/lib
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} depmod -a  2.6.33-rc4
        #copy other stuffs      
        cp eeprog/eeprog ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/usr/sbin/eeprog
        cp -r etc/* ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/etc/


        #create ev3 start/stop script        
        touch ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/etc/init.d/.legacy-bootordering
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d -f lms2012-hwinfo.sh remove
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d -f lms2012-runonce.sh remove
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d -f lms2012-network.sh remove
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d -f lms2012-bluetooth.py remove
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d -f lms2012-driver.sh remove
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d -f lms2012-powerflag.py remove
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d -f lms2012-halt.sh remove
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d lms2012-hwinfo.sh start 5 2 3 4 5 .
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d lms2012-runonce.sh start 6 2 3 4 5 .
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d lms2012-network.sh start 10 2 3 4 5 .
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d lms2012-bluetooth.py start 20 2 3 4 5 .
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d lms2012-driver.sh start 20 2 3 4 5 .
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d lms2012-powerflag.py stop 1 0 .
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d lms2012-halt.sh stop 9 0 .
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} update-rc.d -f  halt  remove
        mkdir ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/tmp/python-ev3

        #install python-ev3 library
        cp -r ../ev3 ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/tmp/python-ev3
        cp ../setup.py ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/tmp/python-ev3       
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} pip install /tmp/python-ev3
        wget https://pypi.python.org/packages/source/r/rpyc/rpyc-3.2.3.tar.gz -O ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/tmp/rpyc-3.2.3.tar.gz
        chroot ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR} pip install /tmp/rpyc-3.2.3.tar.gz

        rm  -r ${TARGET_ROOTFS_DIR_PARENT}/${TARGET_ROOTFS_DIR}/tmp/*





# ------------------------------------------------------------------------------
# Create the custom issue

cd ${TARGET_ROOTFS_DIR_PARENT}

filename="${TARGET_ROOTFS_DIR}/etc/issue"

        echo -n "    Creating "${filename}" ... "

        echo "python-ev3"           > "${filename}"       
        echo "Debian GNU/Linux 7 on LEGO MINDSTORMS EV3! \\\\n \\\\l"         >> "${filename}"

        echo    "done"
exit

echo "-------------------------------------------------------------------------------"
exit
